// schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* -------------------- USER MODEL -------------------- */
model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  email     String    @unique
  name      String?
  role      Role      @default(USER)
  posts     Post[]
  likes     Like[]
  comments  Comment[]

  // Followers / Following (Self Relation)
  followers Follow[] @relation("Followers")
  following Follow[] @relation("Following")
}

/* -------------------- POST MODEL -------------------- */
model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  published Boolean    @default(false)
  title     String
  content   String?
  author    User?      @relation(fields: [authorId], references: [id])
  authorId  String     @db.ObjectId

  likes     Like[]
  comments  Comment[]
}

/* -------------------- LIKE MODEL -------------------- */
model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  
  user   User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  post   Post @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

/* -------------------- COMMENT MODEL -------------------- */
model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  content   String

  user   User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  post   Post @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

/* -------------------- FOLLOW MODEL -------------------- */
model Follow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  follower   User   @relation("Following", fields: [followerId], references: [id])
  followerId String @db.ObjectId

  following   User   @relation("Followers", fields: [followingId], references: [id])
  followingId String @db.ObjectId
}
model Category{
id String @id @default(auto()) @map("_id") @db.ObjectId
name String @unique
}
enum Role {
  USER
  ADMIN
}
